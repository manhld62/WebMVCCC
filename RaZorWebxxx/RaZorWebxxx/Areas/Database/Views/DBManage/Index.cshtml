@using Microsoft.EntityFrameworkCore
@using System.Data
@inject MyBlogContext dbcontext
@{
    ViewData["Title"] = "Thông tin cơ sở dữ liệu";
    var connect = dbcontext.Database.GetDbConnection();
    var dbname = connect.Database;
    var can_connect = dbcontext.Database.CanConnect();
    dbcontext.Database.GetPendingMigrations();
    dbcontext.Database.GetAppliedMigrations();

}

<partial name="_Alertmess" />


<h1>Thông tin về cơ sở dữ liệu</h1>
<p>--Database @dbname</p>
<p>--Source @connect.DataSource</p>
<p>--State @connect.State</p>
<hr />
<h2>Migrations</h2>
@foreach (var migation in dbcontext.Database.GetAppliedMigrations())
{
    <p>@migation</p>
}
@foreach (var migation in dbcontext.Database.GetPendingMigrations())
{
    <p>@migation (pending)</p>
}
@if (!can_connect)
{
    <p class="alert alert-danger">Không có khả năng kết nối đến database</p>
}
@if (dbcontext.Database.GetPendingMigrations().Any())
{
<form method="post"> <button class="btn btn-danger" asp-action="Migrate">Tao Database :@dbname</button>
    </form>
  




}
@if (can_connect)
{
    <h2>Các table</h2>
    await dbcontext.Database.OpenConnectionAsync();
    var table = dbcontext.Database.GetDbConnection().GetSchema("Tables");
    <ul>
        @foreach (System.Data.DataRow row in table.Rows)
        {
            <li>@row["TABLE_NAME"] </li>
        }
    </ul>
    <a class="btn btn-danger" asp-action="DeleteDb">Xóa Database :@dbname</a>


}

